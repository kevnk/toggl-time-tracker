// Generated by CoffeeScript 1.7.1
(function() {
  window.Site = {
    init: function() {
      this.setLocalData(false);
      this.documentTitle = document.title;
      if (location.search) {
        document.location = location.origin + location.pathname;
      }
      this.getData();
      this.attachAutoRefresh();
      return this;
    },
    setLocalData: function(ignoreQueryParams) {
      if (ignoreQueryParams == null) {
        ignoreQueryParams = true;
      }
      this.apiKey = !ignoreQueryParams ? this.getParameterByName('a') || localStorage.getItem('apiKey') : localStorage.getItem('apiKey');
      this.workspaceId = !ignoreQueryParams ? this.getParameterByName('s') || localStorage.getItem('workspaceId') : localStorage.getItem('workspaceId');
      this.userId = !ignoreQueryParams ? this.getParameterByName('u') || localStorage.getItem('userId') : localStorage.getItem('userId');
      if (_.isNull(this.apiKey)) {
        this.apiKey = prompt('Enter your toggl auth token') + '';
      }
      if (_.isNull(this.workspaceId)) {
        this.workspaceId = prompt('Enter your toggl workspaceId') + '';
      }
      if (_.isNull(this.userId)) {
        this.userId = prompt('Enter your toggl userId') + '';
      }
      localStorage.setItem('apiKey', this.apiKey);
      localStorage.setItem('workspaceId', this.workspaceId);
      localStorage.setItem('userId', this.userId);
      this.$content = $('#content');
      this.$loader = $('.row.loading');
      this.today = moment().hour(0).minute(0).second(0);
      this.bom = moment(this.today._d).date(1);
      this.eom = moment(this.today._d).date(this.today.daysInMonth());
      this.isTheFirst = this.today.date() === this.bom.date();
      this.isTheLast = this.today.date() === this.eom.date();
      this.isWeekday = this.today.isWeekDay();
      this.lastTargetHours = localStorage.getItem('lastTargetHours') || 140;
      this.lastDaysOff = localStorage.getItem('lastDaysOff') || 0;
      return this.lastTakenDaysOff = localStorage.getItem('lastTakenDaysOff') || 0;
    },
    calculateVariables: function() {
      this.isWorkDay = this.isWeekday;
      this.daysOff = this.daysOff || this.lastDaysOff;
      this.takenDaysOff = this.takenDaysOff || this.lastTakenDaysOff;
      this.totalWeekDays = this.bom.weekDays(this.eom) + 1;
      this.weekDaysToToday = this.bom.weekDays(this.today) + 1;
      this.weekDaysToEom = this.eom.weekDays(this.today);
      this.workDaysTotal = this.totalWeekDays - this.daysOff;
      this.workDaysWorkedToday = this.weekDaysToToday - this.takenDaysOff;
      this.workDaysWorked = this.isWorkDay ? this.workDaysWorkedToday - 1 : this.workDaysWorkedToday;
      this.workDaysLeft = this.weekDaysToEom - this.daysOff;
      if (this.isTheFirst) {
        this.workDaysWorked = 0;
        this.workDaysWorkedToday = this.isWorkDay ? 1 : 0;
      }
      this.todayAvg = this.round(this.totalHours / this.workDaysWorkedToday);
      this.yesterdayAvg = this.todayAvg;
      if (this.todaysHours) {
        this.yesterdayAvg = this.round((this.totalHours - this.todaysHours) / this.workDaysWorked);
      }
      this.avgPercentageChange = this.round((this.todayAvg - this.yesterdayAvg) / this.yesterdayAvg, true);
      this.targetHours = this.targetHours || this.lastTargetHours;
      this.targetAvg = this.round(this.targetHours / this.workDaysTotal);
      this.hoursTodayToTargetAvg = this.round((this.targetAvg * this.workDaysWorkedToday) - this.totalHours);
      this.totalHoursTodayToTargetAvg = this.round(this.hoursTodayToTargetAvg + this.todaysHours);
      this.percentageTodayToTargetAvg = this.round(this.todaysHours / this.totalHoursTodayToTargetAvg, true);
      this.totalHoursLeftToEomTarget = this.round(this.targetHours - this.totalHours);
      this.avgTodayToEomTarget = this.round(this.totalHoursLeftToEomTarget / this.workDaysLeft);
      this.hoursTodayToEomTargetAvg = this.round(this.avgTodayToEomTarget - this.todaysHours);
      this.percentageTodayToEomTargetAvg = this.round(this.todaysHours / this.avgTodayToEomTarget, true);
      this.percentageTodayAvg = this.round(this.todayAvg / this.targetAvg, true);
    },
    round: function(val, isPercent) {
      var result;
      if (isPercent == null) {
        isPercent = false;
      }
      result = Math.round(val * 100);
      if (!isPercent) {
        result = result / 100;
      }
      return result;
    },
    getData: function() {
      var qSince, qToday, qUntil, that;
      qSince = this.bom.format('YYYY-MM-DD');
      qUntil = this.eom.format('YYYY-MM-DD');
      qToday = this.today.format('YYYY-MM-DD');
      this.detailsUrl = 'https://toggl.com/reports/api/v2/details?rounding=Off&status=active&user_ids=' + this.userId + '&name=&billable=both&calculate=time&sortDirection=asc&sortBy=date&page=1&description=&since=' + qSince + '&until=' + qUntil + '&workspace_id=' + this.workspaceId + '&period=thisMonth&with_total_currencies=1&grouping=&subgrouping=time_entries&order_field=date&order_desc=off&distinct_rates=Off&user_agent=Toggl+New+3.28.13&bars_count=31&subgrouping_ids=true&bookmark_token=';
      this.summaryUrl = 'https://toggl.com/reports/api/v2/summary.json?grouping=projects&subgrouping=time_entries&order_field=title&order_desc=off&rounding=Off&distinct_rates=Off&status=active&user_ids=' + this.userId + '&name=&billable=both&workspace_id=' + this.workspaceId + '&calculate=time&sortDirection=asc&sortBy=title&page=1&description=&since=' + qToday + '&until=' + qToday + '&period=today&with_total_currencies=1&user_agent=Toggl+New+3.28.13&bars_count=31&subgrouping_ids=true&bookmark_token=';
      that = this;
      return $.when($.ajax({
        url: this.detailsUrl,
        beforeSend: (function(_this) {
          return function(xhr) {
            xhr.setRequestHeader('Authorization', 'Basic ' + _this.apiKey);
            return xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
          };
        })(this),
        type: 'GET',
        dataType: 'json',
        contentType: 'application/json',
        success: (function(_this) {
          return function(data) {
            return _this.details = data;
          };
        })(this)
      }), $.ajax({
        url: this.summaryUrl,
        beforeSend: (function(_this) {
          return function(xhr) {
            xhr.setRequestHeader('Authorization', 'Basic ' + _this.apiKey);
            return xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
          };
        })(this),
        type: 'GET',
        dataType: 'json',
        contentType: 'application/json',
        success: (function(_this) {
          return function(data) {
            return _this.summary = data;
          };
        })(this)
      })).done((function(_this) {
        return function() {
          _this.todaysHours = Math.round(_this.summary.total_grand / 1000 / 60 / 60 * 10) / 10;
          _this.totalHours = Math.round(_this.details.total_grand / 1000 / 60 / 60 * 10) / 10;
          _this.calculateVariables();
          return _this.displayData();
        };
      })(this)).fail((function(_this) {
        return function() {
          return alert('fail');
        };
      })(this));
    },
    displayData: function() {
      this.slides = [];
      this.createTargetTodaySlide();
      this.createTargetEomSlide();
      this.addSlidesToContent();
      this.addSlickCarousel();
      this.addStats();
      this.addAdjustersToContent();
      this.recalculateValues();
      this.addDebug();
      return this.toggleContent();
    },
    createTargetTodaySlide: function() {
      var $hoursToTarget, $outer, $slide;
      $slide = $('<div class="hoursTodayToTargetAvg_slide"/>');
      $slide.append($('<h1>Hit Target Avg Today</h1>'));
      $hoursToTarget = $('<div data-percentageTodayToTargetAvg="width">');
      $hoursToTarget.append($('<h3><span data-hoursTodayToTargetAvg/> <small>Hours Left Today</small></h3>'));
      $outer = $('<div class="outer">').append($hoursToTarget);
      $slide.append($outer);
      return this.slides.push($slide);
    },
    createTargetEomSlide: function() {
      var $hoursToTarget, $outer, $slide;
      $slide = $('<div class="hoursTodayToEomTargetAvg_slide"/>');
      $slide.append($('<h1>Hit Target Avg By End of Month</h1>'));
      $hoursToTarget = $('<div data-percentageTodayToEomTargetAvg="width">');
      $hoursToTarget.append($('<h3><span data-hoursTodayToEomTargetAvg/> <small>Hours Left Today</small></h3>'));
      $outer = $('<div class="outer">').append($hoursToTarget);
      $slide.append($outer);
      return this.slides.push($slide);
    },
    addSlidesToContent: function() {
      this.$content.html('<div id="slides"/><div id="pager"/>');
      return _.each(this.slides, (function(_this) {
        return function(slide, i) {
          var slideWrapper;
          slideWrapper = $('<div id="slide-' + i + '"/>');
          slideWrapper.append(slide);
          return _this.$content.find('#slides').append(slideWrapper);
        };
      })(this));
    },
    addSlickCarousel: function() {
      this.lastSlickIndex = localStorage.getItem('lastSlickIndex') || 0;
      this.$slides = $('#slides').slick({
        dots: true,
        speed: 500,
        arrows: false,
        slidesToShow: 1,
        slidesToScroll: 1,
        infinite: true
      }).slick('slickGoTo', this.lastSlickIndex, true);
      return this.$slides.on('afterChange', function(event, slick, currentSlide) {
        return localStorage.setItem('lastSlickIndex', currentSlide);
      });
    },
    addStats: function() {
      var $stats, $targetAvg, $todayAvg, $todaysHours, $totalHours, $workDaysLeft, $workDaysWorkedToday;
      $stats = $('<div id="stats">');
      $todaysHours = $('<div>');
      $todaysHours.append($('<h3 data-todaysHours>'));
      $todaysHours.append($('<small>Today\'s Hours</small>'));
      $stats.append($todaysHours);
      $totalHours = $('<div>');
      $totalHours.append($('<h3 data-totalHours>'));
      $totalHours.append($('<small>' + moment().format('MMMM') + ' Hours</small>'));
      $stats.append($totalHours);
      $todayAvg = $('<div>');
      $todayAvg.append($('<h3 data-todayAvg>'));
      $todayAvg.append($('<small>Current Avg</small>'));
      $stats.append($todayAvg);
      $targetAvg = $('<div>');
      $targetAvg.append($('<h3 data-targetAvg>'));
      $targetAvg.append($('<small>Target Avg</small>'));
      $stats.append($targetAvg);
      $workDaysWorkedToday = $('<div>');
      $workDaysWorkedToday.append($('<h3 data-workDaysWorkedToday>'));
      $workDaysWorkedToday.append($('<small>Days Worked</small>'));
      $stats.append($workDaysWorkedToday);
      $workDaysLeft = $('<div>');
      $workDaysLeft.append($('<h3 data-workDaysLeft>'));
      $workDaysLeft.append($('<small>Work Days Left</small>'));
      $stats.append($workDaysLeft);
      return this.$content.append($stats);
    },
    addAdjustersToContent: function() {
      var $adjusters, labelDaysOff, labelTakenDaysOff, labelTargetHours, rangeDaysOff, rangeTakenDaysOff, rangeTargetHours;
      $adjusters = $('<div id="adjusters">');
      labelTargetHours = $('<label for=targetHours_adjuster>Target Hours for ' + moment().format('MMMM') + ': </label>').append('<span data-targetHours>');
      rangeTargetHours = $('<input type=range id=targetHours_adjuster min=100 value=' + this.targetHours + ' max=200 step=1>');
      rangeTargetHours.on('input', (function(_this) {
        return function() {
          _this.targetHours = rangeTargetHours.val();
          return _this.recalculateValues();
        };
      })(this));
      $adjusters.append($('<div>').append(labelTargetHours).append(rangeTargetHours));
      labelDaysOff = $('<label for=daysOff_adjuster>Remaining Days Off: </label>').append('<span data-daysOff>');
      rangeDaysOff = $('<input type=range id=daysOff_adjuster min=0 value=' + this.daysOff + ' max=15 step=1>');
      rangeDaysOff.on('input', (function(_this) {
        return function() {
          _this.daysOff = rangeDaysOff.val();
          return _this.recalculateValues();
        };
      })(this));
      $adjusters.append($('<div>').append(labelDaysOff).append(rangeDaysOff));
      labelTakenDaysOff = $('<label for=takenDaysOff_adjuster>Used Days Off: </label>').append('<span data-takenDaysOff>');
      rangeTakenDaysOff = $('<input type=range id=takenDaysOff_adjuster min=0 value=' + this.takenDaysOff + ' max=15 step=1>');
      rangeTakenDaysOff.on('input', (function(_this) {
        return function() {
          _this.takenDaysOff = rangeTakenDaysOff.val();
          return _this.recalculateValues();
        };
      })(this));
      $adjusters.append($('<div>').append(labelTakenDaysOff).append(rangeTakenDaysOff));
      return this.$content.append($adjusters);
    },
    toggleContent: function(show) {
      if (show == null) {
        show = true;
      }
      if (show) {
        this.$loader.removeClass('in');
        return this.$content.addClass('in');
      } else {
        this.$loader.addClass('in');
        return this.$content.removeClass('in');
      }
    },
    recalculateValues: function() {
      var boundVariables;
      this.lastTargetHours = this.targetHours;
      localStorage.setItem('lastTargetHours', this.lastTargetHours);
      this.lastDaysOff = this.daysOff;
      localStorage.setItem('lastDaysOff', this.lastDaysOff);
      this.lastTakenDaysOff = this.takenDaysOff;
      localStorage.setItem('lastTakenDaysOff', this.lastTakenDaysOff);
      this.calculateVariables();
      this.addDebug();
      boundVariables = ['percentageTodayToTargetAvg', 'hoursTodayToTargetAvg', 'totalHoursTodayToTargetAvg', 'targetHours', 'totalHours', 'todaysHours', 'targetAvg', 'todayAvg', 'percentageTodayAvg', 'avgPercentageChange', 'daysOff', 'takenDaysOff', 'workDaysWorked', 'workDaysWorkedToday', 'workDaysLeft', 'hoursTodayToEomTargetAvg', 'percentageTodayToEomTargetAvg', 'avgTodayToEomTarget'];
      return _.each(boundVariables, (function(_this) {
        return function(variable) {
          return $('[data-' + variable + ']').each(function(i, el) {
            var $el, addNegClass, addPercent, addPosClass, css, method, val;
            $el = $(el);
            method = $el.attr('data-' + variable) || 'html';
            if (!(_.isUndefined($el[method]) || _.isUndefined(_this[variable]))) {
              val = _this[variable];
              addNegClass = variable === 'avgPercentageChange' && val < 0;
              if (addNegClass) {
                $el.addClass('neg');
              } else {
                $el.removeClass('neg');
              }
              addPosClass = variable === 'avgPercentageChange' && val > 0;
              if (addPosClass) {
                $el.addClass('pos');
              } else {
                $el.removeClass('pos');
              }
              addPercent = method === 'width' || _.contains(['avgPercentageChange', 'percentageTodayToTargetAvg'], variable);
              if (addPercent) {
                val += '%';
              }
              if (method === 'html') {
                return $el.html(val);
              } else {
                css = {};
                if (parseFloat(val, 10) > 100) {
                  val = '100%';
                }
                css[method] = val;
                return $el.css(css);
              }
            }
          });
        };
      })(this));
    },
    attachAutoRefresh: function() {
      this.autoUpdate = 0;
      this.autoTimer = moment();
      return $(window).on('blur', (function(_this) {
        return function() {
          clearInterval(_this.autoUpdate);
          return _this.autoUpdate = setInterval(function() {
            return _this.getData();
          }, 2 * 60 * 1000);
        };
      })(this)).on('focus', (function(_this) {
        return function() {
          clearInterval(_this.autoUpdate);
          if (moment().diff(_this.autoTimer) > 2 * 60 * 1000) {
            _this.autoTimer = moment();
            return _this.getData();
          }
        };
      })(this));
    },
    getParameterByName: function(name) {
      var regex, results;
      name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
      results = regex.exec(location.search);
      if (results === null) {
        return '';
      } else {
        return decodeURIComponent(results[1].replace(/\+/g, " "));
      }
    },
    addDebug: function() {
      if (location.host !== 'localhost') {
        return;
      }
      console.log('%c ===========================================================', 'color:red');
      console.log('%c ===========================================================', 'color:red');
      this.$debug = this.$debug || $('body').append('<pre id="debug" class="container"><table><tbody/></table></pre>').find('#debug tbody');
      this.$debug.html('');
      console.log('%c DEBUG: Site -->', 'color:#F80', Site);
      return _.each(this, (function(_this) {
        return function(item, key) {
          if (!_.isFunction(item)) {
            if (_.isObject(item)) {
              if (item._isAMomentObject) {
                return _this.$debug.append('<tr><th>' + key + ' (Moment):</th><td>' + item.format('MM/DD/YYYY hh:mm:ssa') + '</td></tr>');
              } else {
                return console.log('%c DEBUG: ' + key + ' -->', 'color:#F80', item);
              }
            } else {
              return _this.$debug.append('<tr><th>' + key + ':</th><td>' + item + '</td></tr>');
            }
          }
        };
      })(this));
    }
  };

  Site.init();

}).call(this);
