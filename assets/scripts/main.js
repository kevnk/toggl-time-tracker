// Generated by CoffeeScript 1.7.1
(function() {
  var Site, apiKey, targetEarnings, userId, wage, workspaceId;

  targetEarnings = parseFloat(localStorage.getItem('earnings'), 10);

  wage = parseFloat(localStorage.getItem('wage'), 10);

  apiKey = localStorage.getItem('apiKey');

  workspaceId = localStorage.getItem('workspaceId');

  userId = localStorage.getItem('userId');

  if (!(_.isNumber(targetEarnings) && targetEarnings > 0)) {
    targetEarnings = parseFloat(prompt('Enter your target earnings'), 10);
    localStorage.setItem('earnings', targetEarnings);
  }

  if (!(_.isNumber(wage) && wage > 0)) {
    wage = parseFloat(prompt('Enter your hourly wage'), 10);
    localStorage.setItem('wage', wage);
  }

  if (_.isNull(apiKey)) {
    apiKey = prompt('Enter your toggl auth token') + '';
    localStorage.setItem('apiKey', apiKey);
  }

  if (_.isNull(workspaceId)) {
    workspaceId = prompt('Enter your toggl workspaceId') + '';
    localStorage.setItem('workspaceId', workspaceId);
  }

  if (_.isNull(userId)) {
    userId = prompt('Enter your toggl userId') + '';
    localStorage.setItem('userId', userId);
  }

  Site = {
    init: function() {
      var qSince, qToday, qUntil;
      this.setLocalData();
      this.displaySettings();
      qSince = moment().date(1).format('YYYY-MM-DD');
      qUntil = moment().date(moment().daysInMonth()).format('YYYY-MM-DD');
      qToday = moment().format('YYYY-MM-DD');
      this.detailsUrl = 'https://toggl.com/reports/api/v2/details?rounding=Off&status=active&user_ids=' + this.userId + '&name=&billable=both&calculate=time&sortDirection=asc&sortBy=date&page=1&description=&since=' + qSince + '&until=' + qUntil + '&workspace_id=' + this.workspaceId + '&period=thisMonth&with_total_currencies=1&grouping=&subgrouping=time_entries&order_field=date&order_desc=off&distinct_rates=Off&user_agent=Toggl+New+3.28.13&bars_count=31&subgrouping_ids=true&bookmark_token=';
      this.summaryUrl = 'https://toggl.com/reports/api/v2/summary.json?grouping=projects&subgrouping=time_entries&order_field=title&order_desc=off&rounding=Off&distinct_rates=Off&status=active&user_ids=' + this.userId + '&name=&billable=both&workspace_id=' + this.workspaceId + '&calculate=time&sortDirection=asc&sortBy=title&page=1&description=&since=' + qToday + '&until=' + qToday + '&period=today&with_total_currencies=1&user_agent=Toggl+New+3.28.13&bars_count=31&subgrouping_ids=true&bookmark_token=';
      return this.getData();
    },
    setLocalData: function() {
      this.targetEarnings = localStorage.getItem('earnings');
      this.wage = localStorage.getItem('wage');
      this.userId = localStorage.getItem('userId');
      this.workspaceId = localStorage.getItem('workspaceId');
      this.apiKey = localStorage.getItem('apiKey');
      return this.targetHrs = this.targetEarnings / this.wage;
    },
    getData: function() {
      var that;
      that = this;
      return $.when($.ajax({
        url: this.detailsUrl,
        beforeSend: function(xhr) {
          xhr.setRequestHeader('Authorization', 'Basic ' + apiKey);
          return xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        },
        type: 'GET',
        dataType: 'json',
        contentType: 'application/json',
        success: (function(_this) {
          return function(data) {
            return _this.details = data;
          };
        })(this)
      }), $.ajax({
        url: this.summaryUrl,
        beforeSend: function(xhr) {
          xhr.setRequestHeader('Authorization', 'Basic ' + apiKey);
          return xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        },
        type: 'GET',
        dataType: 'json',
        contentType: 'application/json',
        success: (function(_this) {
          return function(data) {
            return _this.summary = data;
          };
        })(this)
      })).done((function(_this) {
        return function() {
          return _this.displayData();
        };
      })(this)).fail((function(_this) {
        return function() {
          return $('.loading').removeClass('loading').addClass('error').html('<h1><span class="label label-danger">Error! Wrong credentials!</span></h1> <a class="btn btn-default" href="reset/">Try reseting your variables</a>');
        };
      })(this));
    },
    displayData: function() {
      var $clockOut, $current, $target, $targetAvgToday, $targetHrs, $targetToday, $total, bom, currentAvg, daysLeft, daysLeftToday, daysWorked, eod, eom, targetAvg, targetAvgToday, targetToday, today, todaysHours, totalHours;
      $total = $('.total-hours-display');
      $current = $('.current-avg-display');
      $target = $('.target-avg-display');
      $targetHrs = $('.target-hours-display');
      $targetToday = $('.target-today-display');
      $targetAvgToday = $('.target-avg-today-display');
      $clockOut = $('.clock-out-display');
      todaysHours = Math.round(this.summary.total_grand / 1000 / 60 / 60 * 10) / 10;
      totalHours = Math.round(this.details.total_grand / 1000 / 60 / 60 * 10) / 10;
      $total.html(totalHours);
      today = moment().hour(0);
      bom = moment().date(1);
      daysWorked = today.weekDays(bom);
      currentAvg = Math.round(totalHours / daysWorked * 10) / 10;
      $current.html(currentAvg);
      $targetHrs.html(this.targetHrs);
      eom = moment().date(today.daysInMonth());
      daysLeft = today.weekDays(eom);
      targetAvg = Math.round((this.targetHrs - totalHours) / daysLeft * 10) / 10;
      $target.html(targetAvg);
      daysLeftToday = daysLeft + 1;
      targetAvgToday = Math.round((this.targetHrs - totalHours + todaysHours) / daysLeftToday * 10) / 10;
      $targetAvgToday.html(targetAvgToday);
      targetToday = Math.round((targetAvgToday - todaysHours) * 10) / 10;
      $targetToday.html(targetToday);
      eod = moment().add(targetToday, 'h').format('h:mma');
      $clockOut.html(eod);
      $('body').removeClass('show-menu');
      return $('.loading').fadeOut(function() {
        return $('.row.fade').addClass('in');
      });
    },
    displaySettings: function() {
      var $apiKey, $earnings, $form, $inputs, $saveBtn, $userId, $wage, $workspaceId;
      $form = $('.menu form');
      $inputs = $form.find('input');
      $saveBtn = $form.find('button');
      $earnings = $('#earnings').val(this.targetEarnings);
      $wage = $('#wage').val(this.wage);
      $userId = $('#userId').val(this.userId);
      $workspaceId = $('#workspaceId').val(this.workspaceId);
      $apiKey = $('#apiKey').val(this.apiKey);
      return $form.on('submit', (function(_this) {
        return function(e) {
          e.preventDefault();
          localStorage.setItem('earnings', $earnings.val());
          localStorage.setItem('wage', $wage.val());
          localStorage.setItem('userId', $userId.val());
          localStorage.setItem('workspaceId', $workspaceId.val());
          localStorage.setItem('apiKey', $apiKey.val());
          _this.setLocalData();
          _this.displayData();
          return false;
        };
      })(this));
    }
  };

  Site.init();

}).call(this);
