// Generated by CoffeeScript 1.7.1
(function() {
  var Site;

  Site = {
    init: function() {
      this.setLocalData(false);
      this.documentTitle = document.title;
      if (location.search) {
        document.location = location.origin + location.pathname;
      }
      this.getData();
      this.attachAutoRefresh();
      return this;
    },
    setLocalData: function(ignoreQueryParams) {
      if (ignoreQueryParams == null) {
        ignoreQueryParams = true;
      }
      this.apiKey = !ignoreQueryParams ? this.getParameterByName('a') || localStorage.getItem('apiKey') : localStorage.getItem('apiKey');
      this.workspaceId = !ignoreQueryParams ? this.getParameterByName('s') || localStorage.getItem('workspaceId') : localStorage.getItem('workspaceId');
      this.userId = !ignoreQueryParams ? this.getParameterByName('u') || localStorage.getItem('userId') : localStorage.getItem('userId');
      if (_.isNull(this.apiKey)) {
        this.apiKey = prompt('Enter your toggl auth token') + '';
      }
      if (_.isNull(this.workspaceId)) {
        this.workspaceId = prompt('Enter your toggl workspaceId') + '';
      }
      if (_.isNull(this.userId)) {
        this.userId = prompt('Enter your toggl userId') + '';
      }
      localStorage.setItem('apiKey', this.apiKey);
      localStorage.setItem('workspaceId', this.workspaceId);
      localStorage.setItem('userId', this.userId);
      this.$content = $('#content');
      this.$loader = $('.row.loading');
      this.today = moment().hour(0).minute(0).second(0);
      this.bom = moment(this.today._d).date(1);
      this.eom = moment(this.today._d).date(this.today.daysInMonth());
      this.isTheFirst = this.today.date() === this.bom.date();
      this.isTheLast = this.today.date() === this.eom.date();
      this.isWeekday = this.today.isWeekDay();
      this.isHoliday = this.today.holiday();
      this.savedVacations = localStorage.getItem('vacations') ? localStorage.getItem('vacations').split(',') : [];
      this.holidays = [];
      this.holidaysByName = {};
      moment().range(this.bom._d, this.eom._d).by('days', (function(_this) {
        return function(moment) {
          var holiday, holidayObj;
          if (!moment.isWeekDay()) {
            return;
          }
          holiday = moment.holiday();
          if (!_.isUndefined(holiday)) {
            holidayObj = {
              name: holiday,
              date: moment,
              checked: _.contains(_this.savedVacations, holiday)
            };
            _this.holidays.push(holidayObj);
            return _this.holidaysByName[holiday] = holidayObj;
          }
        };
      })(this));
      return this.lastTargetHours = localStorage.getItem('lastTargetHours') || 140;
    },
    calculateVariables: function() {
      this.todaysHours = Math.round(this.summary.total_grand / 1000 / 60 / 60 * 10) / 10;
      this.totalHours = Math.round(this.details.total_grand / 1000 / 60 / 60 * 10) / 10;
      this.isWorkDay = this.isWeekday;
      this.workDaysTotal = this.bom.weekDays(this.eom);
      this.workDaysWorked = this.bom.weekDays(this.today);
      if (this.isWorkDay) {
        this.workDaysWorked--;
      }
      this.workDaysLeft = this.workDaysTotal - this.workDaysWorked;
      this.todayAvg = Math.round(this.totalHours / this.workDaysWorked * 100) / 100;
      this.yesterdayAvg = this.todayAvg;
      if (this.isWorkDay) {
        this.yesterdayAvg = Math.round((this.totalHours - this.todaysHours) / (this.workDaysWorked - 1) * 100) / 100;
      }
      this.avgPercentageChange = Math.round((this.todayAvg - this.yesterdayAvg) / this.yesterdayAvg * 100) / 100;
      this.targetHours = this.targetHours || this.lastTargetHours;
      this.targetAvg = Math.round(this.targetHours / this.workDaysTotal * 100) / 100;
      this.hoursTodayToTargetAvg = Math.round(((this.targetAvg * this.workDaysWorked) - this.totalHours) * 100) / 100;
      this.totalHoursTodayToTargetAvg = this.hoursTodayToTargetAvg + this.todaysHours;
      this.percentageTodayToTargetAvg = Math.round(this.todaysHours / this.totalHoursTodayToTargetAvg * 100);
    },
    getData: function() {
      var qSince, qToday, qUntil, that;
      qSince = this.bom.format('YYYY-MM-DD');
      qUntil = this.eom.format('YYYY-MM-DD');
      qToday = this.today.format('YYYY-MM-DD');
      this.detailsUrl = 'https://toggl.com/reports/api/v2/details?rounding=Off&status=active&user_ids=' + this.userId + '&name=&billable=both&calculate=time&sortDirection=asc&sortBy=date&page=1&description=&since=' + qSince + '&until=' + qUntil + '&workspace_id=' + this.workspaceId + '&period=thisMonth&with_total_currencies=1&grouping=&subgrouping=time_entries&order_field=date&order_desc=off&distinct_rates=Off&user_agent=Toggl+New+3.28.13&bars_count=31&subgrouping_ids=true&bookmark_token=';
      this.summaryUrl = 'https://toggl.com/reports/api/v2/summary.json?grouping=projects&subgrouping=time_entries&order_field=title&order_desc=off&rounding=Off&distinct_rates=Off&status=active&user_ids=' + this.userId + '&name=&billable=both&workspace_id=' + this.workspaceId + '&calculate=time&sortDirection=asc&sortBy=title&page=1&description=&since=' + qToday + '&until=' + qToday + '&period=today&with_total_currencies=1&user_agent=Toggl+New+3.28.13&bars_count=31&subgrouping_ids=true&bookmark_token=';
      that = this;
      return $.when($.ajax({
        url: this.detailsUrl,
        beforeSend: (function(_this) {
          return function(xhr) {
            xhr.setRequestHeader('Authorization', 'Basic ' + _this.apiKey);
            return xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
          };
        })(this),
        type: 'GET',
        dataType: 'json',
        contentType: 'application/json',
        success: (function(_this) {
          return function(data) {
            return _this.details = data;
          };
        })(this)
      }), $.ajax({
        url: this.summaryUrl,
        beforeSend: (function(_this) {
          return function(xhr) {
            xhr.setRequestHeader('Authorization', 'Basic ' + _this.apiKey);
            return xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
          };
        })(this),
        type: 'GET',
        dataType: 'json',
        contentType: 'application/json',
        success: (function(_this) {
          return function(data) {
            return _this.summary = data;
          };
        })(this)
      })).done((function(_this) {
        return function() {
          _this.calculateVariables();
          return _this.displayData();
        };
      })(this)).fail((function(_this) {
        return function() {
          return alert('fail');
        };
      })(this));
    },
    displayData: function() {
      this.slides = [];
      this.addCurrentAvgSlide();
      this.addSlides();
      this.addSlick();
      this.recalculateValues();
      this.addDebug();
      return this.toggleContent();
    },
    addSlides: function() {
      this.$content.html('<div id="slides"/><div id="pager"/>');
      return _.each(this.slides, (function(_this) {
        return function(slide, i) {
          var slideWrapper;
          slideWrapper = $('<div id="slide-' + i + '"/>');
          slideWrapper.append(slide);
          return _this.$content.find('#slides').append(slideWrapper);
        };
      })(this));
    },
    addSlick: function() {
      this.lastSlickIndex = localStorage.getItem('lastSlickIndex') || 0;
      this.$slides = $('#slides').slick({
        dots: true,
        speed: 500,
        slidesToShow: 1,
        slidesToScroll: 1,
        infinite: true
      }).slick('slickGoTo', this.lastSlickIndex, true);
      return this.$slides.on('afterChange', function(event, slick, currentSlide) {
        return localStorage.setItem('lastSlickIndex', currentSlide);
      });
    },
    toggleContent: function(show) {
      if (show == null) {
        show = true;
      }
      if (show) {
        this.$loader.addClass('fade');
        return this.$content.removeClass('fade');
      } else {
        this.$loader.removeClass('fade');
        return this.$content.addClass('fade');
      }
    },
    addCurrentAvgSlide: function() {
      var label, range, slide;
      slide = $('<div id="current_avg_slide"/>');
      label = $('<label for=target_hours data-targetHours>');
      range = $('<input type=range id=target_hours min=100 value=' + this.targetHours + ' max=200 step=1>');
      range.on('input', (function(_this) {
        return function() {
          _this.targetHours = range.val();
          return _this.recalculateValues();
        };
      })(this));
      slide.append($('<h1>').html('Current Average'));
      slide.append($('<h2 data-todayAvg>'));
      slide.append($('<small data-hoursTodayToTargetAvg/>'));
      slide.append(label);
      slide.append(range);
      slide.append($('<h2 data-targetAvg>'));
      return this.slides.push(slide);
    },
    recalculateValues: function() {
      var $avgPercentageChange, $hoursTodayToTargetAvg, $todayAvg;
      this.lastTargetHours = this.targetHours;
      localStorage.setItem('lastTargetHours', this.lastTargetHours);
      this.calculateVariables();
      $todayAvg = $('[data-todayAvg');
      $todayAvg.html(this.todayAvg);
      if (this.todayAvg > this.targetAvg) {
        $todayAvg.removeClass('negative');
      } else {
        $todayAvg.addClass('negative');
      }
      $('[data-targetHours]').html(this.targetHours);
      $avgPercentageChange = $('[data-avgPercentageChange]');
      $avgPercentageChange.html(this.avgPercentageChange + '%');
      if (this.avgPercentageChange >= 0) {
        $avgPercentageChange.removeClass('negative');
      } else {
        $avgPercentageChange.addClass('negative');
      }
      $hoursTodayToTargetAvg = $('[data-hoursTodayToTargetAvg]');
      $hoursTodayToTargetAvg.html(this.hoursTodayToTargetAvg);
      if (this.hoursTodayToTargetAvg <= 0) {
        $hoursTodayToTargetAvg.removeClass('negative');
      } else {
        $hoursTodayToTargetAvg.addClass('negative');
      }
      return $('[data-targetAvg]').html(this.targetAvg);
    },
    attachVacationsDays: function() {},
    storeVacationDays: function() {},
    attachAutoRefresh: function() {
      this.autoUpdate = 0;
      this.autoTimer = moment();
      return $(window).on('blur', (function(_this) {
        return function() {
          clearInterval(_this.autoUpdate);
          return _this.autoUpdate = setInterval(function() {
            return _this.getData();
          }, 2 * 60 * 1000);
        };
      })(this)).on('focus', (function(_this) {
        return function() {
          clearInterval(_this.autoUpdate);
          if (moment().diff(_this.autoTimer) > 2 * 60 * 1000) {
            _this.autoTimer = moment();
            return _this.getData();
          }
        };
      })(this));
    },
    getParameterByName: function(name) {
      var regex, results;
      name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
      results = regex.exec(location.search);
      if (results === null) {
        return '';
      } else {
        return decodeURIComponent(results[1].replace(/\+/g, " "));
      }
    },
    addDebug: function() {
      if (location.host !== 'localhost') {
        return;
      }
      this.$debug = this.$debug || $('body').append('<div id="debug" class="container">').find('#debug');
      this.$debug.html('');
      console.log('%c DEBUG: Site -->', 'color:#F80', Site);
      return _.each(this, (function(_this) {
        return function(item, key) {
          if (!_.isFunction(item)) {
            if (_.isObject(item)) {
              if (item._isAMomentObject) {
                return _this.$debug.append('<strong>' + key + ' (Moment):</strong> ' + item.format('MM/DD/YYYY hh:mm:ssa') + '<br>');
              } else {
                return console.log('%c DEBUG: ' + key + ' -->', 'color:#F80', item);
              }
            } else {
              return _this.$debug.append('<strong>' + key + ':</strong> ' + item + '<br>');
            }
          }
        };
      })(this));
    }
  };

  Site.init();

}).call(this);
